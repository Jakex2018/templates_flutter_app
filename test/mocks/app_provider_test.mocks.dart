// Mocks generated by Mockito 5.4.4 from annotations
// in templates_flutter_app/test/unit/providers/app_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i6;

import 'package:flutter/material.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:templates_flutter_app/models/user_model.dart' as _i2;
import 'package:templates_flutter_app/providers/auth_user_provider.dart' as _i3;
import 'package:templates_flutter_app/providers/suscription_provider.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserModel_0 extends _i1.SmartFake implements _i2.UserModel {
  _FakeUserModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthUserProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthUserProvider extends _i1.Mock implements _i3.AuthUserProvider {
  MockAuthUserProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLogged => (super.noSuchMethod(
        Invocation.getter(#isLogged),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> checkLoginStatus() => (super.noSuchMethod(
        Invocation.method(
          #checkLoginStatus,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setLoggedIn(bool? loggedIn) => (super.noSuchMethod(
        Invocation.method(
          #setLoggedIn,
          [loggedIn],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  String getUserId() => (super.noSuchMethod(
        Invocation.method(
          #getUserId,
          [],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #getUserId,
            [],
          ),
        ),
      ) as String);

  @override
  _i4.Future<String?> getUserIdFromPreferences() => (super.noSuchMethod(
        Invocation.method(
          #getUserIdFromPreferences,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  _i4.Future<_i2.UserModel> getUserData() => (super.noSuchMethod(
        Invocation.method(
          #getUserData,
          [],
        ),
        returnValue: _i4.Future<_i2.UserModel>.value(_FakeUserModel_0(
          this,
          Invocation.method(
            #getUserData,
            [],
          ),
        )),
      ) as _i4.Future<_i2.UserModel>);

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SuscriptionProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockSuscriptionProvider extends _i1.Mock
    implements _i7.SuscriptionProvider {
  MockSuscriptionProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isSuscribed => (super.noSuchMethod(
        Invocation.getter(#isSuscribed),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> loadSubscriptionState(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #loadSubscriptionState,
          [userId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void cancelSuscription(
    String? userId,
    DateTime? suscriptionEndDate,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #cancelSuscription,
          [
            userId,
            suscriptionEndDate,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> expireSubscription(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #expireSubscription,
          [userId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> startSubscriptionGlobal(
    String? userId,
    _i8.BuildContext? context,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #startSubscriptionGlobal,
          [
            userId,
            context,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String?> getFCMTokenFromFirestore(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFCMTokenFromFirestore,
          [userId],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<void> checkAndExpireSubscription(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkAndExpireSubscription,
          [userId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> activateSubscription(
    String? userId,
    bool? isSubscribed,
    DateTime? subscriptionDate,
    DateTime? subscriptionExpirated,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #activateSubscription,
          [
            userId,
            isSubscribed,
            subscriptionDate,
            subscriptionExpirated,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void stopSubscriptionTimer() => super.noSuchMethod(
        Invocation.method(
          #stopSubscriptionTimer,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
