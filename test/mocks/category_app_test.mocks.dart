// Mocks generated by Mockito 5.4.4 from annotations
// in templates_flutter_app/test/unit/views/category_app_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i8;

import 'package:cloud_firestore/cloud_firestore.dart' as _i6;
import 'package:connectivity_plus/connectivity_plus.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:templates_flutter_app/controllers/category_controller.dart'
    as _i4;
import 'package:templates_flutter_app/providers/suscription_provider.dart'
    as _i9;
import 'package:templates_flutter_app/services/connectivity_services.dart'
    as _i3;
import 'package:templates_flutter_app/services/template_data_services.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTemplateDataService_0 extends _i1.SmartFake
    implements _i2.TemplateDataService {
  _FakeTemplateDataService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConnectivityService_1 extends _i1.SmartFake
    implements _i3.ConnectivityService {
  _FakeConnectivityService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CategoryController].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryController extends _i1.Mock
    implements _i4.CategoryController {
  MockCategoryController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TemplateDataService get templateService => (super.noSuchMethod(
        Invocation.getter(#templateService),
        returnValue: _FakeTemplateDataService_0(
          this,
          Invocation.getter(#templateService),
        ),
      ) as _i2.TemplateDataService);

  @override
  _i3.ConnectivityService get connectivityService => (super.noSuchMethod(
        Invocation.getter(#connectivityService),
        returnValue: _FakeConnectivityService_1(
          this,
          Invocation.getter(#connectivityService),
        ),
      ) as _i3.ConnectivityService);

  @override
  int get currentPage => (super.noSuchMethod(
        Invocation.getter(#currentPage),
        returnValue: 0,
      ) as int);

  @override
  set currentPage(int? _currentPage) => super.noSuchMethod(
        Invocation.setter(
          #currentPage,
          _currentPage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get itemsPerPage => (super.noSuchMethod(
        Invocation.getter(#itemsPerPage),
        returnValue: 0,
      ) as int);

  @override
  _i5.Stream<_i6.QuerySnapshot<Map<String, dynamic>>> get templatesStream =>
      (super.noSuchMethod(
        Invocation.getter(#templatesStream),
        returnValue:
            _i5.Stream<_i6.QuerySnapshot<Map<String, dynamic>>>.empty(),
      ) as _i5.Stream<_i6.QuerySnapshot<Map<String, dynamic>>>);

  @override
  set templatesStream(
          _i5.Stream<_i6.QuerySnapshot<Map<String, dynamic>>>?
              _templatesStream) =>
      super.noSuchMethod(
        Invocation.setter(
          #templatesStream,
          _templatesStream,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Stream<_i7.ConnectivityResult> get connectivityStream =>
      (super.noSuchMethod(
        Invocation.getter(#connectivityStream),
        returnValue: _i5.Stream<_i7.ConnectivityResult>.empty(),
      ) as _i5.Stream<_i7.ConnectivityResult>);

  @override
  set connectivityStream(
          _i5.Stream<_i7.ConnectivityResult>? _connectivityStream) =>
      super.noSuchMethod(
        Invocation.setter(
          #connectivityStream,
          _connectivityStream,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Stream<Map<String, dynamic>> get combinedStream => (super.noSuchMethod(
        Invocation.getter(#combinedStream),
        returnValue: _i5.Stream<Map<String, dynamic>>.empty(),
      ) as _i5.Stream<Map<String, dynamic>>);

  @override
  set combinedStream(_i5.Stream<Map<String, dynamic>>? _combinedStream) =>
      super.noSuchMethod(
        Invocation.setter(
          #combinedStream,
          _combinedStream,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void initializeStreams(String? category) => super.noSuchMethod(
        Invocation.method(
          #initializeStreams,
          [category],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void changePage(int? index) => super.noSuchMethod(
        Invocation.method(
          #changePage,
          [index],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i6.DocumentSnapshot<Map<String, dynamic>>> getFilteredTemplates(
          List<_i6.DocumentSnapshot<Map<String, dynamic>>>? documents) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFilteredTemplates,
          [documents],
        ),
        returnValue: <_i6.DocumentSnapshot<Map<String, dynamic>>>[],
      ) as List<_i6.DocumentSnapshot<Map<String, dynamic>>>);

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SuscriptionProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockSuscriptionProvider extends _i1.Mock
    implements _i9.SuscriptionProvider {
  MockSuscriptionProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isSuscribed => (super.noSuchMethod(
        Invocation.getter(#isSuscribed),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> loadSubscriptionState(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #loadSubscriptionState,
          [userId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void cancelSuscription(
    String? userId,
    DateTime? suscriptionEndDate,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #cancelSuscription,
          [
            userId,
            suscriptionEndDate,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> expireSubscription(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #expireSubscription,
          [userId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> startSubscriptionGlobal(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #startSubscriptionGlobal,
          [userId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<String?> getFCMTokenFromFirestore(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFCMTokenFromFirestore,
          [userId],
        ),
        returnValue: _i5.Future<String?>.value(),
      ) as _i5.Future<String?>);

  @override
  _i5.Future<void> checkAndExpireSubscription(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkAndExpireSubscription,
          [userId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> activateSubscription(
    String? userId,
    bool? isSubscribed,
    DateTime? subscriptionDate,
    DateTime? subscriptionExpirated,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #activateSubscription,
          [
            userId,
            isSubscribed,
            subscriptionDate,
            subscriptionExpirated,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void stopSubscriptionTimer() => super.noSuchMethod(
        Invocation.method(
          #stopSubscriptionTimer,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
