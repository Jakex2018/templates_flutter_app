// Mocks generated by Mockito 5.4.4 from annotations
// in templates_flutter_app/test/unit/views/template_app_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:io' as _i7;
import 'dart:ui' as _i11;

import 'package:cloud_firestore/cloud_firestore.dart' as _i6;
import 'package:flutter/material.dart' as _i10;
import 'package:google_mobile_ads/google_mobile_ads.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:templates_flutter_app/controllers/template_controller.dart'
    as _i12;
import 'package:templates_flutter_app/models/template_model.dart';
import 'package:templates_flutter_app/providers/suscription_provider.dart'
    as _i9;
import 'package:templates_flutter_app/services/ad_services.dart' as _i8;
import 'package:templates_flutter_app/services/template_data_services.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeInitializationStatus_0 extends _i1.SmartFake
    implements _i2.InitializationStatus {
  _FakeInitializationStatus_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBannerAdListener_1 extends _i1.SmartFake
    implements _i2.BannerAdListener {
  _FakeBannerAdListener_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TemplateDataService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTemplateDataService extends _i1.Mock
    implements _i4.TemplateDataService {
  MockTemplateDataService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i6.QuerySnapshot<Map<String, dynamic>>> getTemplatesByCategory(
          String? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTemplatesByCategory,
          [category],
        ),
        returnValue:
            _i5.Stream<_i6.QuerySnapshot<Map<String, dynamic>>>.empty(),
      ) as _i5.Stream<_i6.QuerySnapshot<Map<String, dynamic>>>);

  @override
  _i5.Future<void> getData(
    _i4.TemplateDataService? dataService,
    String? image,
    Function? setState,
    String? name,
    String? urlRepository,
    String? nameImage,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getData,
          [
            dataService,
            image,
            setState,
            name,
            urlRepository,
            nameImage,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<String?> accessDemo(String? image) => (super.noSuchMethod(
        Invocation.method(
          #accessDemo,
          [image],
        ),
        returnValue: _i5.Future<String?>.value(),
      ) as _i5.Future<String?>);

  @override
  _i5.Future<String?> fetchGetNameImage(String? image) => (super.noSuchMethod(
        Invocation.method(
          #fetchGetNameImage,
          [image],
        ),
        returnValue: _i5.Future<String?>.value(),
      ) as _i5.Future<String?>);

  @override
  _i5.Future<void> fetchDownloadImage(String? url) => (super.noSuchMethod(
        Invocation.method(
          #fetchDownloadImage,
          [url],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> saveImageToGallery(_i7.File? image) => (super.noSuchMethod(
        Invocation.method(
          #saveImageToGallery,
          [image],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<String?> fetchNameTemplate(String? image) => (super.noSuchMethod(
        Invocation.method(
          #fetchNameTemplate,
          [image],
        ),
        returnValue: _i5.Future<String?>.value(),
      ) as _i5.Future<String?>);

  @override
  _i5.Future<String?> fetchUrlTemplate(String? image) => (super.noSuchMethod(
        Invocation.method(
          #fetchUrlTemplate,
          [image],
        ),
        returnValue: _i5.Future<String?>.value(),
      ) as _i5.Future<String?>);

  @override
  _i5.Future<void> fetchSaveUrlTemplate(String? url) => (super.noSuchMethod(
        Invocation.method(
          #fetchSaveUrlTemplate,
          [url],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [AdService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAdService extends _i1.Mock implements _i8.AdService {
  MockAdService() {
    _i1.throwOnMissingStub(this);
  }

  _i5.Future<_i2.InitializationStatus> get initialization =>
      (super.noSuchMethod(
        Invocation.getter(#initialization),
        returnValue: _i5.Future<_i2.InitializationStatus>.value(
            _FakeInitializationStatus_0(
          this,
          Invocation.getter(#initialization),
        )),
      ) as _i5.Future<_i2.InitializationStatus>);

  set initialization(_i5.Future<_i2.InitializationStatus>? _initialization) =>
      super.noSuchMethod(
        Invocation.setter(
          #initialization,
          _initialization,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set rewardedAd(_i2.RewardedAd? _rewardedAd) => super.noSuchMethod(
        Invocation.setter(
          #rewardedAd,
          _rewardedAd,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.BannerAdListener get bannerListener => (super.noSuchMethod(
        Invocation.getter(#bannerListener),
        returnValue: _FakeBannerAdListener_1(
          this,
          Invocation.getter(#bannerListener),
        ),
      ) as _i2.BannerAdListener);

  @override
  _i5.Future<void> loadRewardedAd(String? adUnitId) => (super.noSuchMethod(
        Invocation.method(
          #loadRewardedAd,
          [adUnitId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> showRewardedAd() => (super.noSuchMethod(
        Invocation.method(
          #showRewardedAd,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [SuscriptionProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockSuscriptionProvider extends _i1.Mock
    implements _i9.SuscriptionProvider {
  MockSuscriptionProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isSuscribed => (super.noSuchMethod(
        Invocation.getter(#isSuscribed),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> loadSubscriptionState(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #loadSubscriptionState,
          [userId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void cancelSuscription(
    String? userId,
    DateTime? suscriptionEndDate,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #cancelSuscription,
          [
            userId,
            suscriptionEndDate,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> expireSubscription(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #expireSubscription,
          [userId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> startSubscriptionGlobal(
    String? userId,
    _i10.BuildContext? context,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #startSubscriptionGlobal,
          [
            userId,
            context,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<String?> getFCMTokenFromFirestore(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFCMTokenFromFirestore,
          [userId],
        ),
        returnValue: _i5.Future<String?>.value(),
      ) as _i5.Future<String?>);

  @override
  _i5.Future<void> checkAndExpireSubscription(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkAndExpireSubscription,
          [userId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> activateSubscription(
    String? userId,
    bool? isSubscribed,
    DateTime? subscriptionDate,
    DateTime? subscriptionExpirated,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #activateSubscription,
          [
            userId,
            isSubscribed,
            subscriptionDate,
            subscriptionExpirated,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void stopSubscriptionTimer() => super.noSuchMethod(
        Invocation.method(
          #stopSubscriptionTimer,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TemplateController].
///
/// See the documentation for Mockito's code generation for more information.
class MockTemplateController extends _i1.Mock
    implements _i12.TemplateController {
  MockTemplateController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Future<TemplateModel> getTemplateData(String? image) async {
    return TemplateModel(
      name: 'Template Name',
      url: 'https://example.com',
      nameImage: 'image_name.jpg',
    );
  }

  @override
  _i5.Future<void> downloadImage(String? image) => (super.noSuchMethod(
        Invocation.method(
          #downloadImage,
          [image],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> saveUrlTemplate(String? url) => (super.noSuchMethod(
        Invocation.method(
          #saveUrlTemplate,
          [url],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<String?> accessDemo(String? image) => (super.noSuchMethod(
        Invocation.method(
          #accessDemo,
          [image],
        ),
        returnValue: _i5.Future<String?>.value(),
      ) as _i5.Future<String?>);
}
