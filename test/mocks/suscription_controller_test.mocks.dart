// Mocks generated by Mockito 5.4.4 from annotations
// in templates_flutter_app/test/unit/controllers/suscription_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i8;

import 'package:flutter/foundation.dart' as _i3;
import 'package:flutter/material.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:templates_flutter_app/models/suscription_model.dart' as _i7;
import 'package:templates_flutter_app/providers/suscription_provider.dart'
    as _i6;
import 'package:templates_flutter_app/services/suscription_services.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWidget_0 extends _i1.SmartFake implements _i2.Widget {
  _FakeWidget_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_1 extends _i1.SmartFake
    implements _i2.InheritedWidget {
  _FakeInheritedWidget_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_2 extends _i1.SmartFake
    implements _i2.DiagnosticsNode {
  _FakeDiagnosticsNode_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i3.TextTreeConfiguration? parentConfiguration,
    _i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info,
  }) =>
      super.toString();
}

/// A class which mocks [SuscriptionServices].
///
/// See the documentation for Mockito's code generation for more information.
class MockSuscriptionServices extends _i1.Mock
    implements _i4.SuscriptionServices {
  MockSuscriptionServices() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> cancelSubscription(
    _i2.BuildContext? context,
    String? userId,
    _i6.SuscriptionProvider? subscriptionProvider,
    dynamic suscription,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelSubscription,
          [
            context,
            userId,
            subscriptionProvider,
            suscription,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void handleSubscription(
    _i2.BuildContext? context,
    _i7.SuscriptionModel? suscription,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #handleSubscription,
          [
            context,
            suscription,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<dynamic> dialogMemberSuscription(_i2.BuildContext? context) =>
      (super.noSuchMethod(
        Invocation.method(
          #dialogMemberSuscription,
          [context],
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Future<dynamic> dialogCancelSuscription(
    _i2.BuildContext? context,
    String? userId,
    _i6.SuscriptionProvider? subscriptionProvider,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #dialogCancelSuscription,
          [
            context,
            userId,
            subscriptionProvider,
          ],
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i2.BuildContext {
  MockBuildContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Widget get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeWidget_0(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i2.Widget);

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  bool get debugDoingBuild => (super.noSuchMethod(
        Invocation.getter(#debugDoingBuild),
        returnValue: false,
      ) as bool);

  @override
  _i2.InheritedWidget dependOnInheritedElement(
    _i2.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dependOnInheritedElement,
          [ancestor],
          {#aspect: aspect},
        ),
        returnValue: _FakeInheritedWidget_1(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
      ) as _i2.InheritedWidget);

  @override
  void visitAncestorElements(_i2.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(
          #visitAncestorElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildElements(_i2.ElementVisitor? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispatchNotification(_i2.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #dispatchNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.DiagnosticsNode describeElement(
    String? name, {
    _i3.DiagnosticsTreeStyle? style = _i3.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeElement,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
      ) as _i2.DiagnosticsNode);

  @override
  _i2.DiagnosticsNode describeWidget(
    String? name, {
    _i3.DiagnosticsTreeStyle? style = _i3.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeWidget,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
      ) as _i2.DiagnosticsNode);

  @override
  List<_i2.DiagnosticsNode> describeMissingAncestor(
          {required Type? expectedAncestorType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeMissingAncestor,
          [],
          {#expectedAncestorType: expectedAncestorType},
        ),
        returnValue: <_i2.DiagnosticsNode>[],
      ) as List<_i2.DiagnosticsNode>);

  @override
  _i2.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeOwnershipChain,
          [name],
        ),
        returnValue: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
      ) as _i2.DiagnosticsNode);
}

/// A class which mocks [SuscriptionProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockSuscriptionProvider extends _i1.Mock
    implements _i6.SuscriptionProvider {
  MockSuscriptionProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isSuscribed => (super.noSuchMethod(
        Invocation.getter(#isSuscribed),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> loadSubscriptionState(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #loadSubscriptionState,
          [userId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void cancelSuscription(
    String? userId,
    DateTime? suscriptionEndDate,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #cancelSuscription,
          [
            userId,
            suscriptionEndDate,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> expireSubscription(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #expireSubscription,
          [userId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> startSubscriptionGlobal(
    String? userId,
    _i2.BuildContext? context,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #startSubscriptionGlobal,
          [
            userId,
            context,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<String?> getFCMTokenFromFirestore(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFCMTokenFromFirestore,
          [userId],
        ),
        returnValue: _i5.Future<String?>.value(),
      ) as _i5.Future<String?>);

  @override
  _i5.Future<void> checkAndExpireSubscription(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkAndExpireSubscription,
          [userId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> activateSubscription(
    String? userId,
    bool? isSubscribed,
    DateTime? subscriptionDate,
    DateTime? subscriptionExpirated,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #activateSubscription,
          [
            userId,
            isSubscribed,
            subscriptionDate,
            subscriptionExpirated,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void stopSubscriptionTimer() => super.noSuchMethod(
        Invocation.method(
          #stopSubscriptionTimer,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
