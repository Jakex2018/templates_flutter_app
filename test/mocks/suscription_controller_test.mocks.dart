// Mocks generated by Mockito 5.4.4 from annotations
// in templates_flutter_app/test/unit/controllers/suscription_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:ui' as _i7;

import 'package:flutter/material.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:templates_flutter_app/models/suscription_model.dart' as _i6;
import 'package:templates_flutter_app/providers/suscription_provider.dart'
    as _i5;
import 'package:templates_flutter_app/services/suscription_services.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [SuscriptionServices].
///
/// See the documentation for Mockito's code generation for more information.
class MockSuscriptionServices extends _i1.Mock
    implements _i2.SuscriptionServices {
  MockSuscriptionServices() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> cancelSubscription(
    _i4.BuildContext? context,
    String? userId,
    _i5.SuscriptionProvider? subscriptionProvider,
    dynamic suscription,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelSubscription,
          [
            context,
            userId,
            subscriptionProvider,
            suscription,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void handleSubscription(
    _i4.BuildContext? context,
    _i6.SuscriptionModel? suscription,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #handleSubscription,
          [
            context,
            suscription,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<dynamic> dialogMemberSuscription(_i4.BuildContext? context) =>
      (super.noSuchMethod(
        Invocation.method(
          #dialogMemberSuscription,
          [context],
        ),
        returnValue: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);

  @override
  _i3.Future<dynamic> dialogCancelSuscription(
    _i4.BuildContext? context,
    String? userId,
    _i5.SuscriptionProvider? subscriptionProvider,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #dialogCancelSuscription,
          [
            context,
            userId,
            subscriptionProvider,
          ],
        ),
        returnValue: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);
}

/// A class which mocks [SuscriptionProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockSuscriptionProvider extends _i1.Mock
    implements _i5.SuscriptionProvider {
  MockSuscriptionProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isSuscribed => (super.noSuchMethod(
        Invocation.getter(#isSuscribed),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> loadSubscriptionState(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #loadSubscriptionState,
          [userId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void cancelSuscription(
    String? userId,
    DateTime? suscriptionEndDate,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #cancelSuscription,
          [
            userId,
            suscriptionEndDate,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> expireSubscription(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #expireSubscription,
          [userId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> startSubscriptionGlobal(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #startSubscriptionGlobal,
          [userId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<String?> getFCMTokenFromFirestore(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFCMTokenFromFirestore,
          [userId],
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);

  @override
  _i3.Future<void> checkAndExpireSubscription(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkAndExpireSubscription,
          [userId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> activateSubscription(
    String? userId,
    bool? isSubscribed,
    DateTime? subscriptionDate,
    DateTime? subscriptionExpirated,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #activateSubscription,
          [
            userId,
            isSubscribed,
            subscriptionDate,
            subscriptionExpirated,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void stopSubscriptionTimer() => super.noSuchMethod(
        Invocation.method(
          #stopSubscriptionTimer,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
