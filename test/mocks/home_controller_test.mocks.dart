// Mocks generated by Mockito 5.4.4 from annotations
// in templates_flutter_app/test/unit/controllers/home_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:ui' as _i10;

import 'package:connectivity_plus/connectivity_plus.dart' as _i5;
import 'package:flutter/material.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;
import 'package:templates_flutter_app/controllers/home_controller.dart' as _i11;
import 'package:templates_flutter_app/providers/auth_user_provider.dart' as _i8;
import 'package:templates_flutter_app/services/connectivity_services.dart'
    as _i4;
import 'package:templates_flutter_app/services/loading_services.dart' as _i2;
import 'package:templates_flutter_app/services/provider_services.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [LoadingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoadingService extends _i1.Mock implements _i2.LoadingService {
  MockLoadingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> simulateLoading() => (super.noSuchMethod(
        Invocation.method(
          #simulateLoading,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [ConnectivityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivityService extends _i1.Mock
    implements _i4.ConnectivityService {
  MockConnectivityService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i5.ConnectivityResult> get connectivityStream =>
      (super.noSuchMethod(
        Invocation.getter(#connectivityStream),
        returnValue: _i3.Stream<_i5.ConnectivityResult>.empty(),
      ) as _i3.Stream<_i5.ConnectivityResult>);
}

/// A class which mocks [ProviderService].
///
/// See the documentation for Mockito's code generation for more information.
class MockProviderService extends _i1.Mock implements _i6.ProviderService {
  MockProviderService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> initializeProviders(_i7.BuildContext? context) =>
      (super.noSuchMethod(
        Invocation.method(
          #initializeProviders,
          [context],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [AuthUserProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthUserProvider extends _i1.Mock implements _i8.AuthUserProvider {
  MockAuthUserProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLogged => (super.noSuchMethod(
        Invocation.getter(#isLogged),
        returnValue: false,
      ) as bool);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void setLoading(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setLoading,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> checkLoginStatus() => (super.noSuchMethod(
        Invocation.method(
          #checkLoginStatus,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> setLoggedIn(bool? loggedIn) => (super.noSuchMethod(
        Invocation.method(
          #setLoggedIn,
          [loggedIn],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  String getUserId() => (super.noSuchMethod(
        Invocation.method(
          #getUserId,
          [],
        ),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.method(
            #getUserId,
            [],
          ),
        ),
      ) as String);

  @override
  _i3.Future<String?> getUserIdFromPreferences() => (super.noSuchMethod(
        Invocation.method(
          #getUserIdFromPreferences,
          [],
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);

  @override
  _i3.Future<String?> getUsername() => (super.noSuchMethod(
        Invocation.method(
          #getUsername,
          [],
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);

  @override
  void addListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [HomeController].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeController extends _i1.Mock implements _i11.HomeController {
  MockHomeController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  String get username => (super.noSuchMethod(
        Invocation.getter(#username),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#username),
        ),
      ) as String);

  @override
  bool get showProgress => (super.noSuchMethod(
        Invocation.getter(#showProgress),
        returnValue: false,
      ) as bool);

  @override
  _i3.Stream<_i5.ConnectivityResult> get connectivityStream =>
      (super.noSuchMethod(
        Invocation.getter(#connectivityStream),
        returnValue: _i3.Stream<_i5.ConnectivityResult>.empty(),
      ) as _i3.Stream<_i5.ConnectivityResult>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> initialize(_i7.BuildContext? context) => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [context],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> simulateLoading() => (super.noSuchMethod(
        Invocation.method(
          #simulateLoading,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void toggleProgress() => super.noSuchMethod(
        Invocation.method(
          #toggleProgress,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
